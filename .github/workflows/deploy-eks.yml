name: Deploy to EKS with ECR and Security Scan

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # AWS 인증
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    # ECR 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # 이미지 빌드 & Push
    - name: Build and Push Docker images
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        echo "Building and pushing images with tag: $IMAGE_TAG"
        
        # Vote 이미지
        docker build -t vote ./vote
        docker tag vote:latest $ECR_REPOSITORY:vote-$IMAGE_TAG
        docker push $ECR_REPOSITORY:vote-$IMAGE_TAG

        # Result 이미지
        docker build -t result ./result
        docker tag result:latest $ECR_REPOSITORY:result-$IMAGE_TAG
        docker push $ECR_REPOSITORY:result-$IMAGE_TAG

        # Worker 이미지
        docker build -t worker ./worker
        docker tag worker:latest $ECR_REPOSITORY:worker-$IMAGE_TAG
        docker push $ECR_REPOSITORY:worker-$IMAGE_TAG

    # Sysdig CLI Scanner 설치
    - name: Install Sysdig CLI Scanner
      run: |
        curl -LO "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(curl -L -s https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt)/linux/amd64/sysdig-cli-scanner"
        chmod +x sysdig-cli-scanner
        sudo mv sysdig-cli-scanner /usr/local/bin/

    # Sysdig 이미지 스캔 - Vote 앱
    - name: Scan Vote Image with Sysdig
      env:
        SYSDIG_API_TOKEN: ${{ secrets.SYSDIG_API_TOKEN }}
        SYSDIG_SECURE_ENDPOINT: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        echo "Scanning vote image..."
        sysdig-cli-scanner \
          --api-token "$SYSDIG_API_TOKEN" \
          --secure-endpoint "$SYSDIG_SECURE_ENDPOINT" \
          --console-log \
          --severity-at-least medium \
          --format json \
          --output-file vote-scan-results.json \
          "$ECR_REPOSITORY:vote-$IMAGE_TAG" || echo "Vote scan completed with findings"

    # Sysdig 이미지 스캔 - Result 앱
    - name: Scan Result Image with Sysdig
      env:
        SYSDIG_API_TOKEN: ${{ secrets.SYSDIG_API_TOKEN }}
        SYSDIG_SECURE_ENDPOINT: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        echo "Scanning result image..."
        sysdig-cli-scanner \
          --api-token "$SYSDIG_API_TOKEN" \
          --secure-endpoint "$SYSDIG_SECURE_ENDPOINT" \
          --console-log \
          --severity-at-least medium \
          --format json \
          --output-file result-scan-results.json \
          "$ECR_REPOSITORY:result-$IMAGE_TAG" || echo "Result scan completed with findings"

    # Sysdig 이미지 스캔 - Worker 앱
    - name: Scan Worker Image with Sysdig
      env:
        SYSDIG_API_TOKEN: ${{ secrets.SYSDIG_API_TOKEN }}
        SYSDIG_SECURE_ENDPOINT: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        echo "Scanning worker image..."
        sysdig-cli-scanner \
          --api-token "$SYSDIG_API_TOKEN" \
          --secure-endpoint "$SYSDIG_SECURE_ENDPOINT" \
          --console-log \
          --severity-at-least medium \
          --format json \
          --output-file worker-scan-results.json \
          "$ECR_REPOSITORY:worker-$IMAGE_TAG" || echo "Worker scan completed with findings"

    # 스캔 결과 요약
    - name: Display Scan Results Summary
      run: |
        echo "=== Security Scan Results Summary ==="
        
        if [ -f vote-scan-results.json ]; then
          echo "Vote Image Scan Results:"
          cat vote-scan-results.json | jq '.summary // "No summary available"' || echo "Failed to parse vote scan results"
        fi
        
        if [ -f result-scan-results.json ]; then
          echo "Result Image Scan Results:"
          cat result-scan-results.json | jq '.summary // "No summary available"' || echo "Failed to parse result scan results"
        fi
        
        if [ -f worker-scan-results.json ]; then
          echo "Worker Image Scan Results:"
          cat worker-scan-results.json | jq '.summary // "No summary available"' || echo "Failed to parse worker scan results"
        fi

    # 스캔 결과를 아티팩트로 업로드
    - name: Upload Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sysdig-scan-results-${{ github.run_number }}
        path: |
          *-scan-results.json
        retention-days: 30

    # kubectl 설치 및 설정 (더 안정적인 방법)
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    - name: Install and configure kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        # kubeconfig 설정
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    # EKS 클러스터 컨텍스트 업데이트 (선택사항 - 클러스터명이 있는 경우)
    - name: Update kubeconfig for EKS
      run: |
        # 만약 EKS 클러스터명을 알고 있다면 아래 명령어 사용
        aws eks update-kubeconfig --name mx4pc-cluster --region ap-northeast-2   
        
        # 현재 컨텍스트 확인
        kubectl config current-context
        kubectl get nodes

    # 매니페스트 이미지 업데이트
    - name: Update Kubernetes manifests
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.run_number }}  # github.sha 대신 run_number 사용 (일관성)
      run: |
        echo "Updating manifests with image tag: $IMAGE_TAG"
        
        # 파일 존재 확인
        ls -la custom-k8s-spec/
        
        # 이미지 업데이트
        sed -i "s|image:.*vote.*|image: $ECR_REPOSITORY:vote-$IMAGE_TAG|g" custom-k8s-spec/05-vote-deployment.yaml
        sed -i "s|image:.*result.*|image: $ECR_REPOSITORY:result-$IMAGE_TAG|g" custom-k8s-spec/07-result-deployment.yaml
        sed -i "s|image:.*worker.*|image: $ECR_REPOSITORY:worker-$IMAGE_TAG|g" custom-k8s-spec/09-worker-deployment.yaml

        # 변경사항 확인
        echo "Updated vote deployment:"
        grep "image:" custom-k8s-spec/05-vote-deployment.yaml
        echo "Updated result deployment:"
        grep "image:" custom-k8s-spec/07-result-deployment.yaml
        echo "Updated worker deployment:"
        grep "image:" custom-k8s-spec/09-worker-deployment.yaml

    # 배포
    - name: Deploy to EKS
      run: |
        echo "Applying Kubernetes manifests..."
        kubectl apply -f custom-k8s-spec/

        echo "Waiting for deployments to be ready..."
        kubectl rollout status deployment/vote -n voting-app --timeout=300s
        kubectl rollout status deployment/result -n voting-app --timeout=300s
        kubectl rollout status deployment/worker -n voting-app --timeout=300s

        echo "Deployment completed successfully!"
        kubectl get pods -l app=vote -n voting-app 
        kubectl get pods -l app=result -n voting-app 
        kubectl get pods -l app=worker -n voting-app